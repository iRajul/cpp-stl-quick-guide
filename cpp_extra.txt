Internal and external linkage via the static and extern keywords
A variable with internal linkage is called an internal variable (or static variable). Variables with internal linkage can be used anywhere within the file they are defined in, but can not be referenced outside the file they exist in.

A variable with external linkage is called an external variable. Variables with external linkage can be used both in the file they are defined in, as well as in other files.
If we want to make a global variable internal (able to be used only within a single file), we can use the static keyword to do so:
	

static int g_x; // g_x is static, and can only be used within this file
Similarly, if we want to make a global variable external (able to be used anywhere in our program), we can use the extern keyword to do so:
	

extern double g_y(9.8); // g_y is external, and can be used by other files

By default, non-const variables declared outside of a block are assumed to be external. However, const variables declared outside of a block are assumed to be internal.

File scope vs. global scope

The terms “file scope” and “global scope” tend to cause confusion, and this is partly due to the way they are informally used. Technically, in C++, all global variables in C++ have “file scope”. However, informally, the term “file scope” is more often applied to file scope variables with internal linkage only, and “global scope” to file scope variables with external linkage.

Consider the following program:

global.cpp:
	

int g_x(2); // external linkage by default

main.cpp:
	

extern int g_x; // forward declaration for g_x -- g_x can be used beyond this point in this file

int main()

{

    std::cout << g_x; // should print 2

    return 0;

}

g_x has file scope within global.cpp -- it can not be directly seen outside of global.cpp. Note that even though it’s used in main.cpp, main.cpp isn’t seeing g_x, it’s seeing the forward declaration of g_x (which also has file scope). The linker is responsible for linking up the definition of g_x in global.cpp with the use of g_x in main.cpp.
Quiz
1) What’s the difference between a variable’s scope, duration, and linkage? What kind of scope, duration, and linkage do global variables have?

Quiz Solutions

1) Show Solution

Scope determines where a variable is accessible. Duration determines where a variable is created and destroyed. Linkage determines whether the variable can be exported to another file or not.

Global variables have global scope (aka. file scope), which means they can be accessed from the point of declaration to the end of the file in which they are declared.

Global variables have static duration, which means they are created when the program is started, and destroyed when it ends.

Global variables can have either internal or external linkage, via the static and extern keywords respectively. 
Scope, duration, and linkage:


What is a namespace?

A namespace defines an area of code in which all identifiers are guaranteed to be unique. 


operator overloading:
1. using friend
2. normal function
3. member function.


Not everything can be overloaded as a friend function

The assignment (=), subscript ([]), function call (()), and member selection (->) operators must be overloaded as member functions, because the language requires them to be.

The following rules of thumb can help you determine which form is best for a given situation:

    If you’re overloading assignment (=), subscript ([]), function call (()), or member selection (->), do so as a member function.
    If you’re overloading a unary operator, do so as a member function.
    If you’re overloading a binary operator that modifies its left operand (e.g. operator+=), do so as a member function if you can.
    If you’re overloading a binary operator that does not modify its left operand (e.g. operator+), do so as a normal function or friend function.


overlaod post and preincrement operator ++ and --

dont call subscript operator on pointer to an object.

Direct, uniform and copy initialization. 

conversion constructor which take atleast one parameter.







